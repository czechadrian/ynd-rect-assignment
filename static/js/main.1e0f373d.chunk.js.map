{"version":3,"sources":["app/helpers/index.tsx","api-wrapper/apiCall.tsx","api-wrapper/users/getUsers.tsx","app/actions/users.tsx","selectors.tsx","api-wrapper/users/getUserRepos.tsx","app/actions/userRepos.tsx","app/components/styled.tsx","app/components/UserList.tsx","app/helpers/utils.tsx","app/screens/styled.tsx","app/screens/Users.tsx","styled.tsx","App.tsx","app/reducers/users.tsx","app/reducers/userRepos.tsx","app/reducers/index.tsx","index.tsx","configureStore.tsx"],"names":["TFetchingStatus","TButtonSize","TButtonTypes","apiGet","queryUrl","axiosOptions","a","axios","get","data","createUrl","queryParams","options","isEmpty","queryString","stringify","getAllUsers","payload","url","q","per_page","fetchUsersInitAction","createAction","fetchUsersSuccessAction","fetchUsersFailureAction","_getUsers","state","users","_getRepositories","repositories","getUsersSelector","createSelector","getUsersFetchingStatusSelector","fetchingStatus","getUserRepositoriesSelector","getUserReposFetchingStatusSelector","getAllUserRepos","user","fetchUserReposInitAction","fetchUserReposSuccessAction","fetchUserReposFailureAction","Panel","Collapse","NoDescriptionStyled","styled","p","DividerStyled","Divider","SpinWrapper","div","StarsCount","span","StarsWrapper","ReposWrapper","RepoWrapper","HeaderStyled","PanelStyled","CollapseStyled","UserList","props","dispatch","useDispatch","useSelector","userReposFetchingStatus","displayDescription","description","_","accordion","onChange","search","then","catch","map","header","login","isEqual","Success","length","image","Empty","PRESENTED_IMAGE_SIMPLE","index","name","stargazers_count","StarFilled","Initial","size","displayShowingResultsLabel","usersFetchingStatus","Layout","InputStyled","Input","ButtonStyled","Button","ShowingResultsStyled","Users","React","useState","setSearch","useEffect","Failure","notification","error","message","success","LARGE","placeholder","val","searchHandler","target","value","type","PRIMARY","onClick","items","getUsers","MainWrapper","main","App","initialState","Defined","usersReducer","createReducer","handleAction","produce","draftState","action","useReposReducer","rootReducer","combineReducers","rootEl","document","getElementById","store","preloadedState","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunkMiddleware","configureStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.1e0f373d.chunk.js","sourcesContent":["export enum TFetchingStatus {\n  Defined = 'Defined',\n  Initial = 'Initial',\n  Success = 'Success',\n  Failure = 'Failure'\n}\n\nexport enum TButtonSize {\n  LARGE = 'large',\n  MIDDLE = 'middle',\n  SMALL = 'small'\n}\n\nexport enum TButtonTypes {\n  DEFAULT = 'default',\n  PRIMARY = 'primary',\n  GHOST = 'ghost',\n  DASHED = 'dashed',\n  LINK = 'link',\n  TEXT = 'text'\n}\n","import axios, { AxiosRequestConfig } from 'axios';\nimport { isEmpty } from 'lodash';\nimport queryString, { StringifyOptions } from 'query-string';\n\nexport const apiGet = async <RES,>(\n  queryUrl: string,\n  axiosOptions?: AxiosRequestConfig\n): Promise<RES> => {\n  const { data } = await axios.get<RES>(queryUrl, {\n    ...axiosOptions\n  });\n  return data;\n};\n\nexport const createUrl = (\n  queryUrl: string,\n  queryParams = {},\n  options?: StringifyOptions\n): string => {\n  if (isEmpty(queryParams)) {\n    return queryUrl;\n  }\n  return queryUrl + '?' + queryString.stringify(queryParams, options);\n};\n","import { apiGet, createUrl } from '../apiCall';\nimport { TGetUsersResponse } from '../types';\n\nexport const getAllUsers = async (\n  payload?: string\n): Promise<TGetUsersResponse> => {\n  const url = createUrl(`https://api.github.com/search/users`, {\n    q: payload,\n    per_page: 5\n  });\n  return apiGet<TGetUsersResponse>(url);\n};\n","import { ThunkAction } from 'redux-thunk';\nimport { Action, ActionType, createAction } from 'typesafe-actions';\n\nimport { TRootState } from '../reducers';\nimport { getAllUsers } from '../../api-wrapper/users/getUsers';\nimport { TUsers } from '../../api-wrapper/types';\n\nexport const fetchUsersInitAction = createAction('users/GET_USERS_INIT')();\nexport const fetchUsersSuccessAction = createAction(\n  'users/GET_USERS_SUCCESS'\n)<TUsers>();\nexport const fetchUsersFailureAction = createAction(\n  'users/GET_USERS_FAILURE'\n)();\n\nexport type TFetchUsersInitAction = ActionType<typeof fetchUsersInitAction>;\nexport type TFetchUsersSuccessAction = ActionType<\n  typeof fetchUsersSuccessAction\n>;\nexport type TFetchUsersFailureAction = ActionType<\n  typeof fetchUsersFailureAction\n>;\n\nexport type TFetchUsersActions =\n  | TFetchUsersInitAction\n  | TFetchUsersFailureAction\n  | TFetchUsersSuccessAction;\n\nexport type TUsersThunkActionType = (\n  search: string\n) => ThunkAction<void, TRootState, null, TFetchUsersActions>;\n\nexport const getUsers: TUsersThunkActionType =\n  (search: string) =>\n  async (dispatch: <T>(action: Action | Promise<Action>) => T) => {\n    dispatch(fetchUsersInitAction());\n    return getAllUsers(search)\n      .then((payload) => {\n        return dispatch(fetchUsersSuccessAction(payload.items));\n      })\n      .catch(() => dispatch(fetchUsersFailureAction()));\n  };\n","import { createSelector } from 'reselect';\n\nimport { TRootState } from './app/reducers';\n\nconst _getUsers = (state: TRootState) => state.users;\nconst _getRepositories = (state: TRootState) => state.repositories;\n\nexport const getUsersSelector = createSelector(\n  _getUsers,\n  (users) => users.users\n);\n\nexport const getUsersFetchingStatusSelector = createSelector(\n  _getUsers,\n  (users) => users.fetchingStatus\n);\n\nexport const getUserRepositoriesSelector = createSelector(\n  _getRepositories,\n  (repositories) => repositories.repositories\n);\n\nexport const getUserReposFetchingStatusSelector = createSelector(\n  _getRepositories,\n  (repositories) => repositories.fetchingStatus\n);\n","import { TGetUserReposResponse } from '../types';\nimport { apiGet, createUrl } from '../apiCall';\n\nexport const getAllUserRepos = async (\n  user: string | Array<string>\n): Promise<TGetUserReposResponse> => {\n  const url = createUrl(`https://api.github.com/users/${user}/repos`);\n\n  return apiGet<TGetUserReposResponse>(url);\n};\n","import { ThunkAction } from 'redux-thunk';\nimport { Action, ActionType, createAction } from 'typesafe-actions';\n\nimport { TRootState } from '../reducers';\nimport { getAllUserRepos } from '../../api-wrapper/users/getUserRepos';\nimport { TGetUserReposResponse } from '../../api-wrapper/types';\n\nexport const fetchUserReposInitAction = createAction('user/GET_REPOS_INIT')();\nexport const fetchUserReposSuccessAction = createAction(\n  'user/GET_REPOS_SUCCESS'\n)<TGetUserReposResponse>();\nexport const fetchUserReposFailureAction = createAction(\n  'user/GET_REPOS_FAILURE'\n)();\n\nexport type TFetchUserReposInitAction = ActionType<\n  typeof fetchUserReposInitAction\n>;\nexport type TFetchUserReposSuccessAction = ActionType<\n  typeof fetchUserReposSuccessAction\n>;\nexport type TFetchUserReposFailureAction = ActionType<\n  typeof fetchUserReposFailureAction\n>;\n\nexport type TFetchUserReposActions =\n  | TFetchUserReposInitAction\n  | TFetchUserReposFailureAction\n  | TFetchUserReposSuccessAction;\n\nexport type TUserReposThunkActionType = (\n  search: string | Array<string>\n) => ThunkAction<void, TRootState, null, TFetchUserReposActions>;\n\nexport const getUserRepos: TUserReposThunkActionType =\n  (search: string | Array<string>) =>\n  async (dispatch: <T>(action: Action | Promise<Action>) => T) => {\n    dispatch(fetchUserReposInitAction());\n    return getAllUserRepos(search)\n      .then((payload) => {\n        return dispatch(fetchUserReposSuccessAction(payload));\n      })\n      .catch(() => dispatch(fetchUserReposFailureAction()));\n  };\n","import styled from 'styled-components';\nimport { Collapse, Divider } from 'antd';\n\nconst { Panel } = Collapse;\n\nexport const NoDescriptionStyled = styled.p`\n  color: gray;\n`;\n\nexport const DividerStyled = styled(Divider)`\n  margin: 0.5rem;\n`;\n\nexport const SpinWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const StarsCount = styled.span`\n  padding-right: 0.25rem;\n`;\n\nexport const StarsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ReposWrapper = styled.div`\n  height: 13rem;\n  overflow: auto;\n`;\n\nexport const RepoWrapper = styled.div`\n  background-color: e8e8e8;\n  font-size: 0.75rem;\n`;\n\nexport const HeaderStyled = styled.div`\n  font-weight: 700;\n  font-size: 1rem;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nexport const PanelStyled = styled(Panel)``;\n\nexport const CollapseStyled = styled(Collapse)`\n  margin-top: 1rem;\n  width: 100%;\n`;\n","import React from 'react';\nimport { Empty, Spin } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { StarFilled } from '@ant-design/icons';\nimport _ from 'lodash';\n\nimport { TUsers } from '../../api-wrapper/types';\nimport { getUserRepos } from '../actions/userRepos';\nimport {\n  getUserReposFetchingStatusSelector,\n  getUserRepositoriesSelector\n} from '../../selectors';\nimport { TFetchingStatus } from '../helpers';\nimport {\n  CollapseStyled,\n  DividerStyled,\n  HeaderStyled,\n  NoDescriptionStyled,\n  PanelStyled,\n  ReposWrapper,\n  RepoWrapper,\n  SpinWrapper,\n  StarsCount,\n  StarsWrapper\n} from './styled';\n\ntype TUserList = {\n  users: TUsers;\n};\n\nconst UserList: React.FC<TUserList> = (props) => {\n  const { users } = props;\n  const dispatch = useDispatch();\n  const repositories = useSelector(getUserRepositoriesSelector);\n  const userReposFetchingStatus = useSelector(\n    getUserReposFetchingStatusSelector\n  );\n\n  const displayDescription = (description: string) =>\n    _.isEmpty(description) ? (\n      <NoDescriptionStyled>no description</NoDescriptionStyled>\n    ) : (\n      <p>{description}</p>\n    );\n\n  return (\n    <CollapseStyled accordion onChange={(user) => dispatch(getUserRepos(user))}>\n      {users.map((user) => (\n        <PanelStyled header={user.login} key={user.login}>\n          <ReposWrapper>\n            {_.isEqual(userReposFetchingStatus, TFetchingStatus.Success) &&\n            repositories.length === 0 ? (\n              <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n            ) : (\n              repositories.map(\n                ({ name, stargazers_count, description }, index) => (\n                  <RepoWrapper key={index}>\n                    <HeaderStyled>\n                      <p>{name}</p>\n                      <StarsWrapper>\n                        <StarsCount>{stargazers_count}</StarsCount>\n                        <StarFilled />\n                      </StarsWrapper>\n                    </HeaderStyled>\n                    {displayDescription(description)}\n                    {!_.isEqual(index, repositories.length - 1) && (\n                      <DividerStyled />\n                    )}\n                  </RepoWrapper>\n                )\n              )\n            )}\n            {_.isEqual(userReposFetchingStatus, TFetchingStatus.Initial) && (\n              <SpinWrapper>\n                <Spin size=\"large\" />\n              </SpinWrapper>\n            )}\n          </ReposWrapper>\n        </PanelStyled>\n      ))}\n    </CollapseStyled>\n  );\n};\n\nexport default UserList;\n","import _ from 'lodash';\n\nimport { TFetchingStatus } from './index';\n\nexport const displayShowingResultsLabel = (\n  usersFetchingStatus: TFetchingStatus,\n  search: string\n) =>\n  _.isEqual(usersFetchingStatus, TFetchingStatus.Success) &&\n  \"Showing users for '\" + search + \"'\";\n","import styled from 'styled-components';\nimport { Button, Input } from 'antd';\n\nexport const Layout = styled.div`\n  width: 480px;\n  padding: 1rem;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  background-color: white;\n  @media (max-width: 800px) {\n    height: 700px;\n  }\n  @media (min-width: 801px) {\n    height: 95%;\n  }\n`;\n\nexport const InputStyled = styled(Input)`\n  width: 100%;\n  background-color: #e8e8e8;\n  margin-bottom: 1rem;\n  color: #707070;\n  :: placeholder {\n    color: #707070;\n  }\n`;\n\nexport const ButtonStyled = styled(Button)`\n  width: 100%;\n`;\nexport const ShowingResultsStyled = styled.span`\n  width: 100%;\n  padding: 0.5rem;\n  font-size: 1.25rem;\n`;\n","import React, { useEffect } from 'react';\nimport { Empty, notification, Spin } from 'antd';\nimport _ from 'lodash';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { TButtonSize, TButtonTypes, TFetchingStatus } from '../helpers';\nimport { getUsers } from '../actions/users';\nimport {\n  getUsersFetchingStatusSelector,\n  getUsersSelector\n} from '../../selectors';\nimport UserList from '../components/UserList';\nimport { displayShowingResultsLabel } from '../helpers/utils';\nimport {\n  ButtonStyled,\n  InputStyled,\n  Layout,\n  ShowingResultsStyled\n} from './styled';\nimport { SpinWrapper } from '../components/styled';\n\nconst Users: React.FC = () => {\n  const dispatch = useDispatch();\n  const users = useSelector(getUsersSelector);\n  const usersFetchingStatus = useSelector(getUsersFetchingStatusSelector);\n  const [search, setSearch] = React.useState('');\n\n  const searchHandler = (search: string) => {\n    setSearch(search);\n  };\n\n  const displayData = () =>\n    users.length === 0 ? <Empty /> : <UserList users={users} />;\n\n  useEffect(() => {\n    if (_.isEqual(usersFetchingStatus, TFetchingStatus.Failure))\n      notification.error({\n        message: 'Error',\n        description: 'Fetching users data failed.'\n      });\n    else if (_.isEqual(usersFetchingStatus, TFetchingStatus.Success))\n      notification.success({\n        message: 'Success',\n        description: 'Fetching users data succeeded.'\n      });\n  }, [usersFetchingStatus]);\n\n  return (\n    <Layout>\n      <InputStyled\n        size={TButtonSize.LARGE}\n        placeholder=\"Enter username\"\n        onChange={(val) => searchHandler(val.target.value)}\n      />\n      <ButtonStyled\n        size={TButtonSize.LARGE}\n        type={TButtonTypes.PRIMARY}\n        onClick={() => dispatch(getUsers(search))}\n      >\n        Search\n      </ButtonStyled>\n      <ShowingResultsStyled>\n        {displayShowingResultsLabel(usersFetchingStatus, search)}\n      </ShowingResultsStyled>\n      {_.isEqual(usersFetchingStatus, TFetchingStatus.Success) && displayData()}\n      {_.isEqual(usersFetchingStatus, TFetchingStatus.Initial) && (\n        <SpinWrapper>\n          <Spin size=\"large\" />\n        </SpinWrapper>\n      )}\n    </Layout>\n  );\n};\n\nexport default Users;\n","import styled from 'styled-components';\n\nexport const MainWrapper = styled.main`\n  background-color: grey;\n  width: 100%;\n  justify-content: center;\n  display: flex;\n  align-items: center;\n\n  @media (min-height: 800px) {\n    height: 100vh;\n  }\n  @media (max-height: 800px) {\n    height: 750px;\n  }\n`;\n","import React from 'react';\nimport 'antd/dist/antd.css';\n\nimport Users from './app/screens/Users';\nimport { MainWrapper } from './styled';\n\nconst App: React.FC = () => (\n  <MainWrapper>\n    <Users />\n  </MainWrapper>\n);\n\nexport default App;\n","import { createReducer } from 'typesafe-actions';\nimport produce from 'immer';\n\nimport {\n  fetchUsersInitAction,\n  fetchUsersSuccessAction,\n  fetchUsersFailureAction,\n  TFetchUsersActions\n} from '../actions/users';\nimport { TFetchingStatus } from '../helpers';\nimport { TUsers } from '../../api-wrapper/types';\n\ntype TPayloadUsers = {\n  users: TUsers;\n  fetchingStatus: TFetchingStatus;\n};\n\nexport const initialState: TPayloadUsers = {\n  users: [],\n  fetchingStatus: TFetchingStatus.Defined\n};\n\nexport const usersReducer = createReducer<TPayloadUsers, TFetchUsersActions>(\n  initialState\n)\n  .handleAction(fetchUsersInitAction, (state) =>\n    produce(state, (draftState) => {\n      draftState.fetchingStatus = TFetchingStatus.Initial;\n    })\n  )\n  .handleAction(fetchUsersSuccessAction, (state, action) =>\n    produce(state, (draftState) => {\n      draftState.fetchingStatus = TFetchingStatus.Success;\n      draftState.users = action.payload;\n    })\n  )\n  .handleAction(fetchUsersFailureAction, (state) =>\n    produce(state, (draftState) => {\n      draftState.fetchingStatus = TFetchingStatus.Failure;\n    })\n  );\n","import { createReducer } from 'typesafe-actions';\nimport produce from 'immer';\n\nimport { TFetchingStatus } from '../helpers';\nimport { TGetUserReposResponse } from '../../api-wrapper/types';\nimport {\n  fetchUserReposFailureAction,\n  fetchUserReposInitAction,\n  fetchUserReposSuccessAction,\n  TFetchUserReposActions\n} from '../actions/userRepos';\n\ntype TPayloadRepositories = {\n  repositories: TGetUserReposResponse;\n  fetchingStatus: TFetchingStatus;\n};\n\nexport const initialState: TPayloadRepositories = {\n  repositories: [],\n  fetchingStatus: TFetchingStatus.Defined\n};\n\nexport const useReposReducer = createReducer<\n  TPayloadRepositories,\n  TFetchUserReposActions\n>(initialState)\n  .handleAction(fetchUserReposInitAction, (state) =>\n    produce(state, (draftState) => {\n      draftState.fetchingStatus = TFetchingStatus.Initial;\n    })\n  )\n  .handleAction(fetchUserReposSuccessAction, (state, action) =>\n    produce(state, (draftState) => {\n      draftState.fetchingStatus = TFetchingStatus.Success;\n      draftState.repositories = action.payload;\n    })\n  )\n  .handleAction(fetchUserReposFailureAction, (state) =>\n    produce(state, (draftState) => {\n      draftState.fetchingStatus = TFetchingStatus.Failure;\n    })\n  );\n","import { combineReducers } from 'redux';\n\nimport { usersReducer as users } from './users';\nimport { useReposReducer as repositories } from './userRepos';\nimport { TFetchingStatus } from '../helpers';\nimport { TGetUserReposResponse, TUsers } from '../../api-wrapper/types';\n\nexport interface TRootState {\n  users: { users: TUsers; fetchingStatus: TFetchingStatus };\n  repositories: {\n    repositories: TGetUserReposResponse;\n    fetchingStatus: TFetchingStatus;\n  };\n}\n\nconst rootReducer = () =>\n  combineReducers<TRootState>({\n    users,\n    repositories\n  });\n\nexport default rootReducer;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport configureStore from './configureStore';\n\nconst rootEl = document.getElementById('root');\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootEl\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport rootReducer from './app/reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nexport default function configureStore(preloadedState?: any) {\n  const composeEnhancer: typeof compose =\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  return createStore(\n    rootReducer(),\n    preloadedState,\n    composeEnhancer(applyMiddleware(thunkMiddleware))\n  );\n\n  // // Hot reloading\n  // if (module.hot) {\n  //   // Enable Webpack hot module replacement for reducers\n  //   module.hot.accept(\"./reducers\", () => {\n  //     store.replaceReducer(rootReducer(history));\n  //   });\n  // }\n\n  // return store;\n}\n"],"sourceRoot":""}